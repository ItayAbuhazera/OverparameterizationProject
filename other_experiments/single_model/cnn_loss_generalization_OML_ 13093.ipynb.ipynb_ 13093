{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1KfisqC9sXzg7OY_qoLg3pdmdOspLWexl","timestamp":1723305456923}],"authorship_tag":"ABX9TyNQpTkGPXkFXvwmSbT8InXx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"kzlidVIfDSyJ","executionInfo":{"status":"ok","timestamp":1723306700470,"user_tz":-180,"elapsed":20582,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}}},"outputs":[],"source":["import torch\n","import torchvision\n","from torchvision import datasets, transforms\n","import torch.optim as optim\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oJX7kWyquHY_","executionInfo":{"status":"ok","timestamp":1723306721575,"user_tz":-180,"elapsed":21120,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}},"outputId":"dcf0991c-ad0a-46dc-ab96-4dc5d9ff2691"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# classes = ('plane', 'car', 'bird', 'cat',\n","#            'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n","\n","# ---------------------- Filter to our wanted classes only ---------------------\n","# Define the classes you want to keep (e.g., class 0 and class 1)\n","classes = ('car', 'frog', 'horse', 'ship')\n","classes_to_keep = [1, 6, 7, 8]\n","\n","# Define the transformation for the dataset\n","transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n","])\n","\n","# Load the CIFAR-10 dataset\n","trainset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n","testset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n","\n","# Function to filter the dataset by the specified classes\n","def filter_dataset_by_class(dataset, classes):\n","    # Get the data and targets\n","    data, targets = dataset.data, torch.tensor(dataset.targets)\n","\n","    # Create a mask for the classes you want to keep\n","    mask = torch.isin(targets, torch.tensor(classes))\n","\n","    # Filter the data and targets\n","    filtered_data = data[mask.numpy()]\n","    filtered_targets = targets[mask].numpy()\n","\n","    for i in range(len(filtered_targets)):\n","      filtered_targets[i] = classes.index(filtered_targets[i])\n","\n","    # Update the dataset's data and targets\n","    dataset.data = filtered_data\n","    dataset.targets = filtered_targets\n","\n","# Size of the unfiltered sets\n","print(f'Unfiltered train set size: {len(trainset)}')\n","print(f'Unfiltered test set size: {len(testset)}')\n","print(f'Unfiltered classes: {trainset.classes}')\n","\n","# Filter the train and test sets\n","filter_dataset_by_class(trainset, classes_to_keep)\n","filter_dataset_by_class(testset, classes_to_keep)\n","\n","# Now the trainset and testset objects are still CIFAR10 datasets, but only contain the selected classes\n","print(f'Filtered train set size: {len(trainset)}')\n","print(f'Filtered test set size: {len(testset)}')\n","print(f'Filtered classes: {trainset.classes}')\n","\n","# Create DataLoader for the filtered datasets\n","batch_size = 4\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=2)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=2)\n","\n","# Example: Iterate through the filtered trainloader\n","for i, (images, labels) in enumerate(trainloader):\n","    print(f'Batch size: {images.size(0)}, Labels: {labels}')\n","    if i == 3:\n","      break\n","\n","print(trainset)\n","print(testset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IrNT8njmDblN","executionInfo":{"status":"ok","timestamp":1723306729733,"user_tz":-180,"elapsed":8160,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}},"outputId":"7697bffc-d19c-491c-fb96-0f5ba0e34514"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 170498071/170498071 [00:02<00:00, 66688569.89it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./data/cifar-10-python.tar.gz to ./data\n","Files already downloaded and verified\n","Unfiltered train set size: 50000\n","Unfiltered test set size: 10000\n","Unfiltered classes: ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\n","Filtered train set size: 20000\n","Filtered test set size: 4000\n","Filtered classes: ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\n","Batch size: 4, Labels: tensor([2, 0, 3, 3])\n","Batch size: 4, Labels: tensor([1, 3, 0, 2])\n","Batch size: 4, Labels: tensor([2, 1, 3, 1])\n","Batch size: 4, Labels: tensor([0, 0, 2, 3])\n","Dataset CIFAR10\n","    Number of datapoints: 20000\n","    Root location: ./data\n","    Split: Train\n","    StandardTransform\n","Transform: Compose(\n","               ToTensor()\n","               Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))\n","           )\n","Dataset CIFAR10\n","    Number of datapoints: 4000\n","    Root location: ./data\n","    Split: Test\n","    StandardTransform\n","Transform: Compose(\n","               ToTensor()\n","               Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))\n","           )\n"]}]},{"cell_type":"code","source":["# functions to show an image\n","def imshow(img):\n","    img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()\n","    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","    plt.show()\n","\n","\n","# get some random training images\n","dataiter = iter(trainloader)\n","images, labels = next(dataiter)\n","\n","# show images\n","imshow(torchvision.utils.make_grid(images))\n","# print labels\n","print(' '.join(f'{classes[labels[j]]:5s}' for j in range(batch_size)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210},"id":"Kw-TiP5bCaKo","executionInfo":{"status":"ok","timestamp":1723306745798,"user_tz":-180,"elapsed":975,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}},"outputId":"cd6549c4-b500-4715-95aa-18d5f3e89e6c"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["horse car   car   ship \n"]}]},{"cell_type":"code","source":["import torch.nn as nn\n","import torch.nn.functional as F\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.conv1 = nn.Conv2d(3, 6, 5)\n","        self.pool = nn.MaxPool2d(2, 2)\n","        self.conv2 = nn.Conv2d(6, 8, 5)\n","        self.fc1 = nn.Linear(8 * 5 * 5, 50)\n","        self.fc2 = nn.Linear(50, 25)\n","        self.fc3 = nn.Linear(25, 4)\n","\n","    def forward(self, x):\n","        x = self.pool(F.relu(self.conv1(x)))\n","        x = self.pool(F.relu(self.conv2(x)))\n","        x = torch.flatten(x, 1) # flatten all dimensions except batch\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","net = Net()"],"metadata":{"id":"oIkGlUKADlpq","executionInfo":{"status":"ok","timestamp":1723306752875,"user_tz":-180,"elapsed":452,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Number of learnable parameters in the model\n","pytorch_total_params = sum(p.numel() for p in net.parameters() if p.requires_grad)\n","print(pytorch_total_params)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GPf8RpIpJtbs","executionInfo":{"status":"ok","timestamp":1723306753157,"user_tz":-180,"elapsed":3,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}},"outputId":"cce43389-16f3-4614-8292-588486528ee5"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["13093\n"]}]},{"cell_type":"code","source":["criterion = nn.CrossEntropyLoss()\n","optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)"],"metadata":{"id":"mL7VgGVjDsh_","executionInfo":{"status":"ok","timestamp":1723306795082,"user_tz":-180,"elapsed":280,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def accuracy(net, test=False):\n","  # Let's test on the whole test-set\n","  correct = 0\n","  total = 0\n","  # since we're not training, we don't need to calculate the gradients for our outputs\n","  dataloader = testloader if test else trainloader\n","  with torch.no_grad():\n","      for data in dataloader:\n","          images, labels = data\n","          # calculate outputs by running images through the network\n","          outputs = net(images)\n","          loss = criterion(outputs, labels)\n","          # the class with the highest energy is what we choose as prediction\n","          _, predicted = torch.max(outputs.data, 1)\n","          total += labels.size(0)\n","          correct += (predicted == labels).sum().item()\n","  accuracy = 100 * correct // total\n","  # print(f'Accuracy of the network on the {\"test\" if test else \"train\"} images: {100 * correct // total} %')\n","  return accuracy, loss.item()\n"],"metadata":{"id":"5oaijBg2EPdl","executionInfo":{"status":"ok","timestamp":1723306796608,"user_tz":-180,"elapsed":2,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["n_epochs = 40\n","train_accuracy = []\n","test_accuracy = []\n","train_losses = []\n","test_losses = []\n","for epoch in range(n_epochs):  # loop over the dataset multiple times\n","\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs; data is a list of [inputs, labels]\n","        inputs, labels = data\n","\n","        # zero the parameter gradients\n","        optimizer.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = net(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')\n","            running_loss = 0.0\n","\n","    n_samples = trainloader.dataset.data.shape[0]\n","\n","    # Calculate train accuracy\n","    train_acc, train_loss = accuracy(net)\n","    train_accuracy.append(train_acc)\n","    train_losses.append(train_loss)\n","\n","    # Calculate test accuracy\n","    test_acc, test_loss = accuracy(net, test=True)\n","    test_accuracy.append(test_acc)\n","    test_losses.append(test_loss)\n","\n","    print(f'Epoch {epoch+1}, Train accuracy: {train_acc}, Test accuracy: {test_acc}, Train loss: {train_loss}, Test loss: {test_loss}')\n","\n","print('Finished Training')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3FFCce0yD13y","outputId":"42990d8a-2ce8-4e52-ff5b-3d6a22169f8b","executionInfo":{"status":"ok","timestamp":1723309531259,"user_tz":-180,"elapsed":2729708,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}}},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["[1,  2000] loss: 1.152\n","[1,  4000] loss: 0.739\n","Epoch 1, Train accuracy: 79, Test accuracy: 78, Train loss: 0.22054332494735718, Test loss: 0.7326857447624207\n","[2,  2000] loss: 0.561\n","[2,  4000] loss: 0.514\n","Epoch 2, Train accuracy: 80, Test accuracy: 80, Train loss: 0.5158478021621704, Test loss: 0.45413750410079956\n","[3,  2000] loss: 0.466\n","[3,  4000] loss: 0.452\n","Epoch 3, Train accuracy: 85, Test accuracy: 83, Train loss: 0.06429855525493622, Test loss: 0.40613818168640137\n","[4,  2000] loss: 0.424\n","[4,  4000] loss: 0.416\n","Epoch 4, Train accuracy: 86, Test accuracy: 83, Train loss: 0.07941287010908127, Test loss: 0.05502713844180107\n","[5,  2000] loss: 0.380\n","[5,  4000] loss: 0.383\n","Epoch 5, Train accuracy: 87, Test accuracy: 85, Train loss: 0.5672361850738525, Test loss: 0.10719820111989975\n","[6,  2000] loss: 0.354\n","[6,  4000] loss: 0.376\n","Epoch 6, Train accuracy: 89, Test accuracy: 86, Train loss: 0.0328391008079052, Test loss: 0.08451104164123535\n","[7,  2000] loss: 0.332\n","[7,  4000] loss: 0.339\n","Epoch 7, Train accuracy: 88, Test accuracy: 85, Train loss: 0.34628912806510925, Test loss: 0.17606723308563232\n","[8,  2000] loss: 0.307\n","[8,  4000] loss: 0.316\n","Epoch 8, Train accuracy: 89, Test accuracy: 86, Train loss: 1.1756410598754883, Test loss: 0.05296191945672035\n","[9,  2000] loss: 0.294\n","[9,  4000] loss: 0.312\n","Epoch 9, Train accuracy: 91, Test accuracy: 87, Train loss: 0.6846464276313782, Test loss: 0.18679282069206238\n","[10,  2000] loss: 0.279\n","[10,  4000] loss: 0.292\n","Epoch 10, Train accuracy: 90, Test accuracy: 87, Train loss: 0.20130285620689392, Test loss: 0.01316461618989706\n","[11,  2000] loss: 0.268\n","[11,  4000] loss: 0.264\n","Epoch 11, Train accuracy: 91, Test accuracy: 87, Train loss: 1.1878788471221924, Test loss: 0.011836239136755466\n","[12,  2000] loss: 0.246\n","[12,  4000] loss: 0.265\n","Epoch 12, Train accuracy: 91, Test accuracy: 87, Train loss: 0.028093691915273666, Test loss: 0.12835831940174103\n","[13,  2000] loss: 0.229\n","[13,  4000] loss: 0.259\n","Epoch 13, Train accuracy: 90, Test accuracy: 85, Train loss: 0.005591142922639847, Test loss: 0.003749621333554387\n","[14,  2000] loss: 0.231\n","[14,  4000] loss: 0.234\n","Epoch 14, Train accuracy: 91, Test accuracy: 86, Train loss: 0.8273448944091797, Test loss: 0.17960746586322784\n","[15,  2000] loss: 0.212\n","[15,  4000] loss: 0.227\n","Epoch 15, Train accuracy: 92, Test accuracy: 86, Train loss: 0.15775911509990692, Test loss: 0.14664623141288757\n","[16,  2000] loss: 0.201\n","[16,  4000] loss: 0.216\n","Epoch 16, Train accuracy: 93, Test accuracy: 86, Train loss: 0.13063861429691315, Test loss: 0.2309054732322693\n","[17,  2000] loss: 0.185\n","[17,  4000] loss: 0.216\n","Epoch 17, Train accuracy: 93, Test accuracy: 86, Train loss: 0.007980803959071636, Test loss: 0.005697696935385466\n","[18,  2000] loss: 0.179\n","[18,  4000] loss: 0.203\n","Epoch 18, Train accuracy: 94, Test accuracy: 87, Train loss: 0.03031810373067856, Test loss: 0.005107261706143618\n","[19,  2000] loss: 0.173\n","[19,  4000] loss: 0.186\n","Epoch 19, Train accuracy: 94, Test accuracy: 86, Train loss: 0.012479441240429878, Test loss: 0.0009562386549077928\n","[20,  2000] loss: 0.165\n","[20,  4000] loss: 0.195\n","Epoch 20, Train accuracy: 92, Test accuracy: 85, Train loss: 0.7614297866821289, Test loss: 0.0020088606979697943\n","[21,  2000] loss: 0.167\n","[21,  4000] loss: 0.180\n","Epoch 21, Train accuracy: 93, Test accuracy: 86, Train loss: 0.004383773542940617, Test loss: 0.0017692003166303039\n","[22,  2000] loss: 0.171\n","[22,  4000] loss: 0.173\n","Epoch 22, Train accuracy: 93, Test accuracy: 86, Train loss: 0.023258773609995842, Test loss: 0.0002291976852575317\n","[23,  2000] loss: 0.145\n","[23,  4000] loss: 0.161\n","Epoch 23, Train accuracy: 95, Test accuracy: 86, Train loss: 0.018349802121520042, Test loss: 0.03162868320941925\n","[24,  2000] loss: 0.143\n","[24,  4000] loss: 0.164\n","Epoch 24, Train accuracy: 95, Test accuracy: 86, Train loss: 0.4615149199962616, Test loss: 0.05375344678759575\n","[25,  2000] loss: 0.131\n","[25,  4000] loss: 0.165\n","Epoch 25, Train accuracy: 94, Test accuracy: 85, Train loss: 0.1778424084186554, Test loss: 0.018438715487718582\n","[26,  2000] loss: 0.145\n","[26,  4000] loss: 0.140\n","Epoch 26, Train accuracy: 96, Test accuracy: 87, Train loss: 0.098556287586689, Test loss: 0.03312600031495094\n","[27,  2000] loss: 0.126\n","[27,  4000] loss: 0.137\n","Epoch 27, Train accuracy: 95, Test accuracy: 86, Train loss: 0.07650764286518097, Test loss: 0.01836475357413292\n","[28,  2000] loss: 0.125\n","[28,  4000] loss: 0.149\n","Epoch 28, Train accuracy: 96, Test accuracy: 87, Train loss: 0.0006419164128601551, Test loss: 0.0012538897572085261\n","[29,  2000] loss: 0.111\n","[29,  4000] loss: 0.143\n","Epoch 29, Train accuracy: 95, Test accuracy: 86, Train loss: 0.15226905047893524, Test loss: 0.00012624208466149867\n","[30,  2000] loss: 0.103\n","[30,  4000] loss: 0.153\n","Epoch 30, Train accuracy: 94, Test accuracy: 85, Train loss: 0.07884107530117035, Test loss: 0.03292524069547653\n","[31,  2000] loss: 0.118\n","[31,  4000] loss: 0.125\n","Epoch 31, Train accuracy: 95, Test accuracy: 86, Train loss: 0.0061105904169380665, Test loss: 0.2127796858549118\n","[32,  2000] loss: 0.107\n","[32,  4000] loss: 0.152\n","Epoch 32, Train accuracy: 96, Test accuracy: 86, Train loss: 0.45348891615867615, Test loss: 0.0001501325605204329\n","[33,  2000] loss: 0.113\n","[33,  4000] loss: 0.142\n","Epoch 33, Train accuracy: 96, Test accuracy: 86, Train loss: 0.6070605516433716, Test loss: 0.016476962715387344\n","[34,  2000] loss: 0.100\n","[34,  4000] loss: 0.110\n","Epoch 34, Train accuracy: 96, Test accuracy: 86, Train loss: 0.008382349275052547, Test loss: 2.5241291950806044e-05\n","[35,  2000] loss: 0.098\n","[35,  4000] loss: 0.126\n","Epoch 35, Train accuracy: 96, Test accuracy: 86, Train loss: 0.09524339437484741, Test loss: 3.8742987840123533e-07\n","[36,  2000] loss: 0.108\n","[36,  4000] loss: 0.118\n","Epoch 36, Train accuracy: 96, Test accuracy: 85, Train loss: 0.09110774844884872, Test loss: 6.427716289181262e-05\n","[37,  2000] loss: 0.102\n","[37,  4000] loss: 0.118\n","Epoch 37, Train accuracy: 96, Test accuracy: 86, Train loss: 0.17367491126060486, Test loss: 0.0001939676731126383\n","[38,  2000] loss: 0.101\n","[38,  4000] loss: 0.125\n","Epoch 38, Train accuracy: 97, Test accuracy: 86, Train loss: 0.006403359584510326, Test loss: 2.190397026424762e-05\n","[39,  2000] loss: 0.090\n","[39,  4000] loss: 0.135\n","Epoch 39, Train accuracy: 96, Test accuracy: 85, Train loss: 0.0005279719480313361, Test loss: 0.0002618868893478066\n","[40,  2000] loss: 0.094\n","[40,  4000] loss: 0.111\n","Epoch 40, Train accuracy: 96, Test accuracy: 86, Train loss: 2.4437831598334014e-06, Test loss: 4.729181091533974e-05\n","Finished Training\n"]}]},{"cell_type":"code","source":["dir_path = '/content/drive/MyDrive/MSc courses/OML project/4_class_cnn/13093/'\n","\n","# Create a directory for the experiment\n","import os\n","os.makedirs(dir_path, exist_ok=True)\n","\n","# Save the net\n","PATH = dir_path + 'model_13093.pth'\n","torch.save(net.state_dict(), PATH)\n","\n","# Save the accuracy (train, test), and loss\n","df = pd.DataFrame({'train_accuracy': train_accuracy, 'test_accuracy': test_accuracy, 'train_loss': train_losses, 'test_loss': test_losses})\n","df.to_csv(dir_path + 'results_13093.csv', index=False)"],"metadata":{"id":"nOxIYePXD7uM","executionInfo":{"status":"ok","timestamp":1723309531727,"user_tz":-180,"elapsed":471,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["print(accuracy(net, test=False))\n","print(accuracy(net, test=True))"],"metadata":{"id":"NVTF6zYdIiYA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723309562050,"user_tz":-180,"elapsed":30325,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}},"outputId":"f4f66213-cf3c-4a29-8a0f-af19565d7664"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["(96, 0.2785533368587494)\n","(86, 4.729181091533974e-05)\n"]}]},{"cell_type":"code","source":["dataiter = iter(testloader)\n","images, labels = next(dataiter)\n","\n","# print images\n","imshow(torchvision.utils.make_grid(images))\n","print('GroundTruth: ', ' '.join(f'{classes[labels[j]]:5s}' for j in range(4)))"],"metadata":{"id":"4j3f2bwMEKp0","colab":{"base_uri":"https://localhost:8080/","height":210},"executionInfo":{"status":"ok","timestamp":1723309562608,"user_tz":-180,"elapsed":575,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}},"outputId":"9cd821af-9354-48db-da7c-ec59fe19a309"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["GroundTruth:  ship  ship  frog  frog \n"]}]},{"cell_type":"code","source":["# Load the network we learned\n","net = Net()\n","net.load_state_dict(torch.load(PATH))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rzc5x5UKELOP","executionInfo":{"status":"ok","timestamp":1723309562608,"user_tz":-180,"elapsed":9,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}},"outputId":"db578522-8a42-421e-9331-e3789ce36cf4"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["outputs = net(images)\n","_, predicted = torch.max(outputs, 1)\n","\n","print('Predicted: ', ' '.join(f'{classes[predicted[j]]:5s}'\n","                              for j in range(4)))"],"metadata":{"id":"qZEhdiH1EM_l","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723309562608,"user_tz":-180,"elapsed":5,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}},"outputId":"056d2f27-3ea7-485f-aac8-956a92ccb451"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted:  ship  ship  frog  frog \n"]}]},{"cell_type":"code","source":["# prepare to count predictions for each class\n","correct_pred = {classname: 0 for classname in classes}\n","total_pred = {classname: 0 for classname in classes}\n","\n","# again no gradients needed\n","with torch.no_grad():\n","    for data in testloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predictions = torch.max(outputs, 1)\n","        # collect the correct predictions for each class\n","        for label, prediction in zip(labels, predictions):\n","            if label == prediction:\n","                correct_pred[classes[label]] += 1\n","            total_pred[classes[label]] += 1\n","\n","\n","# print accuracy for each class\n","for classname, correct_count in correct_pred.items():\n","    accuracy = 100 * float(correct_count) / total_pred[classname]\n","    print(f'Accuracy for class: {classname:5s} is {accuracy:.1f} %')"],"metadata":{"id":"w5CdpKVaET3u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723309567095,"user_tz":-180,"elapsed":4491,"user":{"displayName":"raz monsonego","userId":"08009361753624164852"}},"outputId":"a0c0c626-bbce-48cd-fd3d-85fddc2f62da"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy for class: car   is 85.3 %\n","Accuracy for class: frog  is 89.7 %\n","Accuracy for class: horse is 82.1 %\n","Accuracy for class: ship  is 87.0 %\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"BCZL_W4lPR0h"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The outcome we want:\n","A graph of the test error vs. the number of parameters.\n","We want to show the double-descent phenomenon.\n","\n","Additions:\n","- We want to show the train-error as well - possibly on the same graph as the test error.\n","- A graph of the convergance time (# of epochs) vs. the number of parameters (?) Something like this. Can be nice to talk about the convergance time maybe.\n","\n","The experiments that we want to do:\n","- We want to have at least 15 data-points (we may need more).\n","- So we will make at least 15 neural networks with different # of parameters approximately uniform between 10000-50000.\n","- For each experiment, we save the following:\n","  - All train and test accuracy, and loss values throughout the learning process (saved to csv file).\n"],"metadata":{"id":"opdIAb1prhlI"}},{"cell_type":"markdown","source":["The order of experiments: 40 epochs of each experiments\n","Raz will run: From 12000 and up until 30000, with ~3000 granularity\n","Itay will run: From 45000 and down to 30000, with ~3000 granularity"],"metadata":{"id":"GGXsm7dZ1YBN"}},{"cell_type":"code","source":[],"metadata":{"id":"vFhgm5691Xxn"},"execution_count":null,"outputs":[]}]}